document.querySelector('mutation-test-report-app').report = {"files":{"/home/travis/build/thiagobustamante/node-eventstore/src/event-store.ts":{"language":"typescript","mutants":[{"id":"1","location":{"end":{"column":6,"line":25},"start":{"column":48,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"0","location":{"end":{"column":6,"line":18},"start":{"column":78,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"2","location":{"end":{"column":46,"line":21},"start":{"column":13,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"3","location":{"end":{"column":46,"line":21},"start":{"column":13,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"4","location":{"end":{"column":10,"line":23},"start":{"column":48,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":6,"line":29},"start":{"column":56,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"5","location":{"end":{"column":68,"line":22},"start":{"column":29,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"7","location":{"end":{"column":6,"line":40},"start":{"column":79,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"8","location":{"end":{"column":84,"line":39},"start":{"column":42,"line":39}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"9","location":{"end":{"column":6,"line":55},"start":{"column":90,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"11","location":{"end":{"column":75,"line":50},"start":{"column":13,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"10","location":{"end":{"column":75,"line":50},"start":{"column":13,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"12","location":{"end":{"column":30,"line":50},"start":{"column":28,"line":50}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"13","location":{"end":{"column":10,"line":52},"start":{"column":77,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"14","location":{"end":{"column":14,"line":54},"start":{"column":13,"line":54}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"15","location":{"end":{"column":67,"line":53},"start":{"column":25,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"16","location":{"end":{"column":80,"line":54},"start":{"column":15,"line":54}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"17","location":{"end":{"column":6,"line":65},"start":{"column":67,"line":63}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"18","location":{"end":{"column":6,"line":76},"start":{"column":83,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as _ from 'lodash';\nimport { EventStreamImpl } from './event-stream';\nimport { Event } from './model/event';\nimport { PersistenceProvider } from './provider/provider';\nimport { HasSubscribers, Publisher, Subscriber, Subscription } from './publisher/publisher';\n\n/**\n * The EventStore itself. To create EventStore instances, use the {@link EventStoreBuilder}\n */\nexport class EventStore implements EventStore, HasSubscribers {\n\n    private persistenceProvider: PersistenceProvider;\n    private storePublisher: Publisher;\n\n    public constructor(provider: PersistenceProvider, publisher?: Publisher) {\n        this.persistenceProvider = provider;\n        this.storePublisher = publisher;\n    }\n\n    public get provider(): PersistenceProvider {\n        if (_.isNil(this.persistenceProvider)) {\n            throw new Error('No Provider configured in EventStore.');\n        }\n        return this.persistenceProvider;\n    }\n\n    public get publisher(): Publisher | HasSubscribers {\n        return this.storePublisher;\n    }\n\n    /**\n     * Retrieve an event stream.\n     * @param aggregation The parent aggregation for the event stream\n     * @param streamId The stream identifier. Can be any string\n     * @return The existing stream. If no stream exists for to the given id, a new one\n     * will be created when the first event is added to the stream.\n     */\n    public getEventStream(aggregation: string, streamId: string): EventStream {\n        return new EventStreamImpl(this, { aggregation: aggregation, id: streamId });\n    }\n\n    /**\n     * Add a new subscription to notifications channel associated with the given aggregation.\n     * It is necessary to have a valid {@link Publisher} configured that supports subscriptions.\n     * @param aggregation The aggregation for the stream events\n     * @param subscriber Declares the function to be called to handle new messages\n     * @return A subscription. Can be used to remove the subscription to the publisher channel.\n     */\n    public subscribe(aggregation: string, subscriber: Subscriber): Promise<Subscription> {\n        if (this.publisher && (this.publisher as HasSubscribers).subscribe) {\n            return (this.publisher as HasSubscribers).subscribe(aggregation, subscriber);\n        }\n        throw new Error('There is no valid Publisher configured. '\n            + 'Configure a Publisher that implements HasSubscribers int erface');\n    }\n\n    /**\n     * Retrieves a ranged aggregation list\n     * @param offset The start position in the aggregation list\n     * @param limit The desired quantity aggregations\n     * @return The aggregation list\n     */\n    public async getAggregations(offset?: number, limit?: number) {\n        return this.provider.getAggregations(offset, limit);\n    }\n\n    /**\n     * Retrieves a ranged stream list\n     * @param aggregation The aggregation\n     * @param offset The start position in the stream list\n     * @param limit The desired quantity streams\n     * @return The stream list\n     */\n    public async getStreams(aggregation: string, offset?: number, limit?: number) {\n        return this.provider.getStreams(aggregation, offset, limit);\n    }\n}\n\n/**\n * An Event Stream\n */\nexport interface EventStream {\n    /**\n     * The event stream identifier\n     */\n    streamId: string;\n    /**\n     * The parent aggregation for this event stream\n     */\n    aggregation: string;\n    /**\n     * Rertieve a list containing all the events in the stream in order.\n     * @param offset The start position in the stream list\n     * @param limit The desired quantity events\n     * @return All the events\n     */\n    getEvents(offset?: number, limit?: number): Promise<Array<Event>>;\n    /**\n     * Add a new event to the end of the event stream.\n     * @param data The event data\n     * @return The event, updated with informations like its sequence order and commitTimestamp\n     */\n    addEvent(data: any): Promise<Event>;\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/event-stream.ts":{"language":"typescript","mutants":[{"id":"20","location":{"end":{"column":6,"line":25},"start":{"column":35,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"19","location":{"end":{"column":6,"line":17},"start":{"column":64,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"21","location":{"end":{"column":6,"line":32},"start":{"column":38,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"22","location":{"end":{"column":6,"line":42},"start":{"column":78,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"23","location":{"end":{"column":6,"line":58},"start":{"column":38,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"24","location":{"end":{"column":38,"line":51},"start":{"column":13,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"26","location":{"end":{"column":10,"line":56},"start":{"column":40,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"27","location":{"end":{"column":14,"line":55},"start":{"column":68,"line":52}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"28","location":{"end":{"column":6,"line":62},"start":{"column":48,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"25","location":{"end":{"column":38,"line":51},"start":{"column":13,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"}],"source":"import { EventStore, EventStream } from './event-store';\nimport { Event } from './model/event';\nimport { Stream } from './model/stream';\nimport { PersistenceProvider } from './provider/provider';\nimport { Publisher } from './publisher/publisher';\n\n/**\n * An Event Stream\n */\nexport class EventStreamImpl implements EventStream {\n    private stream: Stream;\n    private eventStore: EventStore;\n\n    public constructor(eventStore: EventStore, stream: Stream) {\n        this.eventStore = eventStore;\n        this.stream = stream;\n    }\n\n    /**\n     * The event stream identifier\n     * The event stream\n     */\n    public get streamId(): string {\n        return this.stream.id;\n    }\n\n    /**\n     * The parent aggregation for this event stream\n     */\n    public get aggregation(): string {\n        return this.stream.aggregation;\n    }\n\n    /**\n     * Rertieve a list containing all the events in the stream in order.\n     * @param offset The start position in the stream list\n     * @param limit The desired quantity events\n     * @return All the events\n     */\n    public getEvents(offset?: number, limit?: number): Promise<Array<Event>> {\n        return this.getProvider().getEvents(this.stream, offset, limit);\n    }\n\n    /**\n     * Add a new event to the end of the event stream.\n     * @param data The event data\n     * @return The event, updated with informations like its sequence order and commitTimestamp\n     */\n    public async addEvent(data: any) {\n        const addedEvent: Event = await this.getProvider().addEvent(this.stream, data);\n        if (this.eventStore.publisher) {\n            await (this.eventStore.publisher as Publisher).publish({\n                event: addedEvent,\n                stream: this.stream\n            });\n        }\n        return addedEvent;\n    }\n\n    private getProvider(): PersistenceProvider {\n        return this.eventStore.provider;\n    }\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/provider/memory.ts":{"language":"typescript","mutants":[{"id":"29","location":{"end":{"column":6,"line":22},"start":{"column":54,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"30","location":{"end":{"column":10,"line":19},"start":{"column":30,"line":15}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"31","location":{"end":{"column":6,"line":27},"start":{"column":72,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"32","location":{"end":{"column":68,"line":26},"start":{"column":45,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"33","location":{"end":{"column":68,"line":26},"start":{"column":45,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"34","location":{"end":{"column":53,"line":26},"start":{"column":51,"line":26}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"35","location":{"end":{"column":6,"line":32},"start":{"column":86,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"36","location":{"end":{"column":73,"line":31},"start":{"column":49,"line":31}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"37","location":{"end":{"column":73,"line":31},"start":{"column":49,"line":31}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"39","location":{"end":{"column":6,"line":41},"start":{"column":102,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"38","location":{"end":{"column":57,"line":31},"start":{"column":55,"line":31}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"40","location":{"end":{"column":20,"line":36},"start":{"column":13,"line":36}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"41","location":{"end":{"column":20,"line":36},"start":{"column":13,"line":36}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"43","location":{"end":{"column":77,"line":38},"start":{"column":53,"line":38}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"42","location":{"end":{"column":10,"line":39},"start":{"column":22,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"44","location":{"end":{"column":77,"line":38},"start":{"column":53,"line":38}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"45","location":{"end":{"column":61,"line":38},"start":{"column":59,"line":38}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"46","location":{"end":{"column":18,"line":40},"start":{"column":16,"line":40}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"47","location":{"end":{"column":6,"line":55},"start":{"column":66,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"48","location":{"end":{"column":21,"line":45},"start":{"column":13,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"49","location":{"end":{"column":21,"line":45},"start":{"column":13,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"51","location":{"end":{"column":10,"line":48},"start":{"column":23,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"50","location":{"end":{"column":21,"line":45},"start":{"column":13,"line":45}},"mutatorName":"BooleanLiteral","replacement":"streams","status":"Killed"},{"id":"53","location":{"end":{"column":21,"line":50},"start":{"column":13,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"52","location":{"end":{"column":21,"line":50},"start":{"column":13,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"54","location":{"end":{"column":21,"line":50},"start":{"column":13,"line":50}},"mutatorName":"BooleanLiteral","replacement":"history","status":"Killed"},{"id":"55","location":{"end":{"column":10,"line":53},"start":{"column":23,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"56","location":{"end":{"column":41,"line":51},"start":{"column":23,"line":51}},"mutatorName":"ArrayDeclaration","replacement":"new Array([])","status":"RuntimeError"}],"source":"import * as _ from 'lodash';\nimport { Event } from '../model/event';\nimport { Stream } from '../model/stream';\nimport { PersistenceProvider } from './provider';\n\n/**\n * A Persistence Provider that handle all the data in memory. It is a very simple implementation that should be used\n * only for development and test purposes.\n */\nexport class InMemoryProvider implements PersistenceProvider {\n    private store: Map<string, Map<string, Array<Event>>> = new Map();\n\n    public async addEvent(stream: Stream, data: any) {\n        const currentEvents = await this.getEventsList(stream.aggregation, stream.id);\n        const event: Event = {\n            commitTimestamp: new Date().getTime(),\n            payload: data,\n            sequence: currentEvents.length\n        };\n        currentEvents.push(event);\n        return event;\n    }\n\n    public async getEvents(stream: Stream, offset = 0, limit?: number) {\n        const history = this.getEventsList(stream.aggregation, stream.id);\n        return _(history).drop(offset).take(limit || history.length).value();\n    }\n\n    public async getAggregations(offset = 0, limit?: number): Promise<Array<string>> {\n        const keys = Array.from(this.store.keys());\n        return _(keys).sort().drop(offset).take(limit || this.store.size).value();\n    }\n\n    public async getStreams(aggregation: string, offset = 0, limit?: number): Promise<Array<string>> {\n        const streams = this.store.get(aggregation);\n        if (streams) {\n            const keys = Array.from(streams.keys());\n            return _(keys).sort().drop(offset).take(limit || this.store.size).value();\n        }\n        return [];\n    }\n\n    private getEventsList(aggregation: string, streamId: string) {\n        let streams = this.store.get(aggregation);\n        if (!streams) {\n            streams = new Map<string, Array<Event>>();\n            this.store.set(aggregation, streams);\n        }\n        let history = streams.get(streamId);\n        if (!history) {\n            history = new Array<Event>();\n            streams.set(streamId, history);\n        }\n        return history;\n    }\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/provider/mongo.ts":{"language":"typescript","mutants":[{"id":"58","location":{"end":{"column":6,"line":36},"start":{"column":54,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"57","location":{"end":{"column":6,"line":18},"start":{"column":30,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"60","location":{"end":{"column":10,"line":28},"start":{"column":30,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"59","location":{"end":{"column":103,"line":22},"start":{"column":102,"line":22}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"RuntimeError"},{"id":"62","location":{"end":{"column":30,"line":31},"start":{"column":13,"line":31}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"61","location":{"end":{"column":80,"line":30},"start":{"column":62,"line":30}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"63","location":{"end":{"column":30,"line":31},"start":{"column":13,"line":31}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"65","location":{"end":{"column":10,"line":33},"start":{"column":32,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"64","location":{"end":{"column":30,"line":31},"start":{"column":13,"line":31}},"mutatorName":"BooleanLiteral","replacement":"result.result.ok","status":"Killed"},{"id":"67","location":{"end":{"column":6,"line":49},"start":{"column":67,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"66","location":{"end":{"column":64,"line":32},"start":{"column":29,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"68","location":{"end":{"column":104,"line":40},"start":{"column":36,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"69","location":{"end":{"column":49,"line":40},"start":{"column":38,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"70","location":{"end":{"column":82,"line":40},"start":{"column":62,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"71","location":{"end":{"column":23,"line":41},"start":{"column":13,"line":41}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"72","location":{"end":{"column":23,"line":41},"start":{"column":13,"line":41}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"73","location":{"end":{"column":21,"line":41},"start":{"column":20,"line":41}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"74","location":{"end":{"column":21,"line":41},"start":{"column":20,"line":41}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"75","location":{"end":{"column":10,"line":43},"start":{"column":25,"line":41}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"76","location":{"end":{"column":22,"line":44},"start":{"column":13,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"77","location":{"end":{"column":22,"line":44},"start":{"column":13,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"78","location":{"end":{"column":20,"line":44},"start":{"column":19,"line":44}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"79","location":{"end":{"column":20,"line":44},"start":{"column":19,"line":44}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"80","location":{"end":{"column":10,"line":46},"start":{"column":24,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"81","location":{"end":{"column":6,"line":63},"start":{"column":81,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"82","location":{"end":{"column":79,"line":53},"start":{"column":49,"line":53}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"83","location":{"end":{"column":77,"line":53},"start":{"column":56,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"84","location":{"end":{"column":23,"line":55},"start":{"column":13,"line":55}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"85","location":{"end":{"column":23,"line":55},"start":{"column":13,"line":55}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"86","location":{"end":{"column":21,"line":55},"start":{"column":20,"line":55}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"87","location":{"end":{"column":21,"line":55},"start":{"column":20,"line":55}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"88","location":{"end":{"column":10,"line":57},"start":{"column":25,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"89","location":{"end":{"column":22,"line":58},"start":{"column":13,"line":58}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"90","location":{"end":{"column":22,"line":58},"start":{"column":13,"line":58}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"91","location":{"end":{"column":20,"line":58},"start":{"column":19,"line":58}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"92","location":{"end":{"column":20,"line":58},"start":{"column":19,"line":58}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"93","location":{"end":{"column":10,"line":60},"start":{"column":24,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"94","location":{"end":{"column":6,"line":79},"start":{"column":97,"line":65}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"95","location":{"end":{"column":57,"line":68},"start":{"column":20,"line":68}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"96","location":{"end":{"column":42,"line":68},"start":{"column":22,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"97","location":{"end":{"column":41,"line":69},"start":{"column":20,"line":69}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"98","location":{"end":{"column":39,"line":69},"start":{"column":27,"line":69}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"99","location":{"end":{"column":23,"line":71},"start":{"column":13,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"100","location":{"end":{"column":23,"line":71},"start":{"column":13,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"101","location":{"end":{"column":21,"line":71},"start":{"column":20,"line":71}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"102","location":{"end":{"column":21,"line":71},"start":{"column":20,"line":71}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"103","location":{"end":{"column":10,"line":73},"start":{"column":25,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"104","location":{"end":{"column":22,"line":74},"start":{"column":13,"line":74}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"105","location":{"end":{"column":22,"line":74},"start":{"column":13,"line":74}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"106","location":{"end":{"column":20,"line":74},"start":{"column":19,"line":74}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"107","location":{"end":{"column":20,"line":74},"start":{"column":19,"line":74}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"108","location":{"end":{"column":10,"line":76},"start":{"column":24,"line":74}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"109","location":{"end":{"column":6,"line":83},"start":{"column":67,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"111","location":{"end":{"column":6,"line":91},"start":{"column":28,"line":85}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"110","location":{"end":{"column":44,"line":82},"start":{"column":16,"line":82}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"112","location":{"end":{"column":34,"line":86},"start":{"column":13,"line":86}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"113","location":{"end":{"column":34,"line":86},"start":{"column":13,"line":86}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"114","location":{"end":{"column":34,"line":86},"start":{"column":13,"line":86}},"mutatorName":"BooleanLiteral","replacement":"this.eventCollection","status":"Killed"},{"id":"115","location":{"end":{"column":10,"line":89},"start":{"column":36,"line":86}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"117","location":{"end":{"column":6,"line":99},"start":{"column":30,"line":93}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"116","location":{"end":{"column":72,"line":88},"start":{"column":64,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"118","location":{"end":{"column":37,"line":94},"start":{"column":13,"line":94}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"119","location":{"end":{"column":37,"line":94},"start":{"column":13,"line":94}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"120","location":{"end":{"column":37,"line":94},"start":{"column":13,"line":94}},"mutatorName":"BooleanLiteral","replacement":"this.countersCollection","status":"Killed"},{"id":"121","location":{"end":{"column":10,"line":97},"start":{"column":39,"line":94}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"123","location":{"end":{"column":6,"line":106},"start":{"column":36,"line":101}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"122","location":{"end":{"column":77,"line":96},"start":{"column":67,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"124","location":{"end":{"column":30,"line":102},"start":{"column":13,"line":102}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"125","location":{"end":{"column":30,"line":102},"start":{"column":13,"line":102}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"127","location":{"end":{"column":10,"line":104},"start":{"column":32,"line":102}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"126","location":{"end":{"column":30,"line":102},"start":{"column":13,"line":102}},"mutatorName":"BooleanLiteral","replacement":"this.mongoClient","status":"Killed"},{"id":"128","location":{"end":{"column":98,"line":103},"start":{"column":73,"line":103}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"129","location":{"end":{"column":96,"line":103},"start":{"column":92,"line":103}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"130","location":{"end":{"column":6,"line":123},"start":{"column":62,"line":108}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"131","location":{"end":{"column":34,"line":111},"start":{"column":13,"line":111}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"132","location":{"end":{"column":44,"line":113},"start":{"column":13,"line":113}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"133","location":{"end":{"column":42,"line":113},"start":{"column":21,"line":113}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"134","location":{"end":{"column":14,"line":117},"start":{"column":13,"line":114}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"135","location":{"end":{"column":38,"line":115},"start":{"column":33,"line":115}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"136","location":{"end":{"column":29,"line":116},"start":{"column":25,"line":116}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"137","location":{"end":{"column":23,"line":119},"start":{"column":13,"line":119}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"138","location":{"end":{"column":23,"line":119},"start":{"column":13,"line":119}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"139","location":{"end":{"column":23,"line":119},"start":{"column":13,"line":119}},"mutatorName":"BooleanLiteral","replacement":"result.ok","status":"Killed"},{"id":"140","location":{"end":{"column":10,"line":121},"start":{"column":25,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"141","location":{"end":{"column":64,"line":120},"start":{"column":29,"line":120}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import * as _ from 'lodash';\nimport { Collection, MongoClient } from 'mongodb';\nimport { Event } from '../model/event';\nimport { Stream } from '../model/stream';\nimport { PersistenceProvider } from './provider';\n\n/**\n * A Persistence Provider that handle all the data in mongodb.\n */\nexport class MongoProvider implements PersistenceProvider {\n    private mongoURL: string;\n    private eventCollection: Collection;\n    private countersCollection: Collection;\n    private mongoClient: MongoClient;\n\n    constructor(url: string) {\n        this.mongoURL = url;\n    }\n\n    public async addEvent(stream: Stream, data: any) {\n        const events = await this.events();\n        const sequence = await this.getNextSequenceValue(this.getKey(stream.aggregation, stream.id)) - 1;\n        const commitTimestamp = new Date().getTime();\n        const event: Event = {\n            commitTimestamp: commitTimestamp,\n            payload: data,\n            sequence: sequence\n        };\n\n        const result = await events.insertOne(_.merge(event, { stream: stream }));\n        if (!result.result.ok) {\n            throw new Error('Error saving event into the store');\n        }\n\n        return event;\n    }\n\n    public async getEvents(stream: Stream, offset = 0, limit = 0) {\n        const events = await this.events();\n        const cursor = events.find({ 'stream.id': stream.id, 'stream.aggregation': stream.aggregation });\n        if (offset > 0) {\n            cursor.skip(offset);\n        }\n        if (limit > 0) {\n            cursor.limit(limit);\n        }\n\n        return await cursor.toArray();\n    }\n\n    public async getAggregations(offset = 0, limit = 0): Promise<Array<string>> {\n        const events = await this.events();\n        const cursor = events.aggregate().group({ _id: '$stream.aggregation' });\n\n        if (offset > 0) {\n            cursor.skip(offset);\n        }\n        if (limit > 0) {\n            cursor.limit(limit);\n        }\n        const aggregations: Array<string> = await cursor.toArray();\n        return aggregations;\n    }\n\n    public async getStreams(aggregation: string, offset = 0, limit = 0): Promise<Array<string>> {\n        const events = await this.events();\n        const cursor = events.aggregate()\n            .match({ 'stream.aggregation': aggregation })\n            .group({ _id: '$stream.id' });\n\n        if (offset > 0) {\n            cursor.skip(offset);\n        }\n        if (limit > 0) {\n            cursor.limit(limit);\n        }\n        const streams: Array<string> = await cursor.toArray();\n        return streams;\n    }\n\n    private getKey(aggregation: string, streamId: string): string {\n        return `${aggregation}:${streamId}`;\n    }\n\n    private async events() {\n        if (!this.eventCollection) {\n            const mongoClient = await this.getMongoClient();\n            this.eventCollection = mongoClient.db().collection('events');\n        }\n        return this.eventCollection;\n    }\n\n    private async counters() {\n        if (!this.countersCollection) {\n            const mongoClient = await this.getMongoClient();\n            this.countersCollection = mongoClient.db().collection('counters');\n        }\n        return this.countersCollection;\n    }\n\n    private async getMongoClient() {\n        if (!this.mongoClient) {\n            this.mongoClient = await MongoClient.connect(this.mongoURL, { useNewUrlParser: true });\n        }\n        return this.mongoClient;\n    }\n\n    private async getNextSequenceValue(sequenceName: string) {\n        const counters = await this.counters();\n        const result = await counters.findOneAndUpdate(\n            { _id: sequenceName },\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            { $inc: { sequence_value: 1 } },\n            {\n                returnOriginal: false,\n                upsert: true\n            });\n\n        if (!result.ok) {\n            throw new Error('Error reading next sequence value');\n        }\n        return result.value.sequence_value;\n    }\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/provider/mysql.ts":{"language":"typescript","mutants":[{"id":"142","location":{"end":{"column":32,"line":12},"start":{"column":27,"line":12}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"144","location":{"end":{"column":6,"line":33},"start":{"column":54,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"143","location":{"end":{"column":6,"line":16},"start":{"column":38,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"145","location":{"end":{"column":51,"line":21},"start":{"column":50,"line":21}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"146","location":{"end":{"column":110,"line":20},"start":{"column":109,"line":20}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"147","location":{"end":{"column":108,"line":20},"start":{"column":45,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"148","location":{"end":{"column":49,"line":21},"start":{"column":13,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"149","location":{"end":{"column":53,"line":22},"start":{"column":13,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"150","location":{"end":{"column":97,"line":23},"start":{"column":13,"line":23}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"151","location":{"end":{"column":98,"line":25},"start":{"column":41,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"152","location":{"end":{"column":117,"line":25},"start":{"column":100,"line":25}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"153","location":{"end":{"column":10,"line":31},"start":{"column":30,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"155","location":{"end":{"column":6,"line":49},"start":{"column":68,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"154","location":{"end":{"column":66,"line":35},"start":{"column":64,"line":35}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"156","location":{"end":{"column":23,"line":37},"start":{"column":13,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"157","location":{"end":{"column":23,"line":37},"start":{"column":13,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"158","location":{"end":{"column":21,"line":37},"start":{"column":19,"line":37}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"159","location":{"end":{"column":21,"line":37},"start":{"column":19,"line":37}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"160","location":{"end":{"column":10,"line":39},"start":{"column":25,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"161","location":{"end":{"column":126,"line":40},"start":{"column":59,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"163","location":{"end":{"column":10,"line":48},"start":{"column":35,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"162","location":{"end":{"column":59,"line":41},"start":{"column":13,"line":41}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"164","location":{"end":{"column":14,"line":47},"start":{"column":20,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"165","location":{"end":{"column":56,"line":51},"start":{"column":54,"line":51}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"166","location":{"end":{"column":6,"line":58},"start":{"column":82,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"167","location":{"end":{"column":23,"line":53},"start":{"column":13,"line":53}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"168","location":{"end":{"column":23,"line":53},"start":{"column":13,"line":53}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"169","location":{"end":{"column":21,"line":53},"start":{"column":19,"line":53}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"170","location":{"end":{"column":21,"line":53},"start":{"column":19,"line":53}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"171","location":{"end":{"column":10,"line":55},"start":{"column":25,"line":53}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"172","location":{"end":{"column":90,"line":56},"start":{"column":39,"line":56}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"173","location":{"end":{"column":28,"line":57},"start":{"column":13,"line":57}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"174","location":{"end":{"column":72,"line":60},"start":{"column":70,"line":60}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"175","location":{"end":{"column":6,"line":67},"start":{"column":98,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"176","location":{"end":{"column":23,"line":62},"start":{"column":13,"line":62}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"177","location":{"end":{"column":23,"line":62},"start":{"column":13,"line":62}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"178","location":{"end":{"column":21,"line":62},"start":{"column":19,"line":62}},"mutatorName":"EqualityOperator","replacement":"<","status":"Killed"},{"id":"179","location":{"end":{"column":21,"line":62},"start":{"column":19,"line":62}},"mutatorName":"EqualityOperator","replacement":">","status":"Killed"},{"id":"180","location":{"end":{"column":10,"line":64},"start":{"column":25,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"181","location":{"end":{"column":109,"line":65},"start":{"column":39,"line":65}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"182","location":{"end":{"column":41,"line":66},"start":{"column":13,"line":66}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"183","location":{"end":{"column":6,"line":74},"start":{"column":34,"line":69}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"184","location":{"end":{"column":30,"line":70},"start":{"column":13,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"185","location":{"end":{"column":30,"line":70},"start":{"column":13,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"187","location":{"end":{"column":10,"line":73},"start":{"column":32,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"186","location":{"end":{"column":30,"line":70},"start":{"column":13,"line":70}},"mutatorName":"BooleanLiteral","replacement":"this.initialized","status":"Killed"},{"id":"188","location":{"end":{"column":36,"line":72},"start":{"column":32,"line":72}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"189","location":{"end":{"column":6,"line":88},"start":{"column":34,"line":76}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"190","location":{"end":{"column":14,"line":87},"start":{"column":13,"line":87}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"191","location":{"end":{"column":14,"line":86},"start":{"column":13,"line":86}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"192","location":{"end":{"column":14,"line":85},"start":{"column":13,"line":85}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"193","location":{"end":{"column":14,"line":84},"start":{"column":13,"line":84}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"194","location":{"end":{"column":14,"line":83},"start":{"column":13,"line":83}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"195","location":{"end":{"column":14,"line":82},"start":{"column":13,"line":82}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"196","location":{"end":{"column":14,"line":81},"start":{"column":13,"line":81}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"197","location":{"end":{"column":14,"line":80},"start":{"column":13,"line":80}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"199","location":{"end":{"column":14,"line":78},"start":{"column":13,"line":78}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"198","location":{"end":{"column":14,"line":79},"start":{"column":13,"line":79}},"mutatorName":"ArithmeticOperator","replacement":"-","status":"RuntimeError"},{"id":"201","location":{"end":{"column":51,"line":78},"start":{"column":15,"line":78}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"200","location":{"end":{"column":69,"line":77},"start":{"column":32,"line":77}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"202","location":{"end":{"column":47,"line":79},"start":{"column":15,"line":79}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"203","location":{"end":{"column":50,"line":80},"start":{"column":15,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"204","location":{"end":{"column":30,"line":81},"start":{"column":15,"line":81}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"205","location":{"end":{"column":30,"line":82},"start":{"column":15,"line":82}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"206","location":{"end":{"column":69,"line":83},"start":{"column":15,"line":83}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"207","location":{"end":{"column":34,"line":84},"start":{"column":15,"line":84}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"208","location":{"end":{"column":54,"line":85},"start":{"column":15,"line":85}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"209","location":{"end":{"column":48,"line":86},"start":{"column":15,"line":86}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"210","location":{"end":{"column":18,"line":87},"start":{"column":15,"line":87}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { Event } from '../model/event';\nimport { Stream } from '../model/stream';\nimport { MySQLConfig } from './mysql/config';\nimport { MySQL } from './mysql/mysql';\nimport { PersistenceProvider } from './provider';\n\n/**\n * A Persistence Provider that handle all the data in mysql.\n */\nexport class MySQLProvider implements PersistenceProvider {\n    private mysql: MySQL;\n    private initialized = false;\n\n    constructor(config: MySQLConfig) {\n        this.mysql = new MySQL(config);\n    }\n\n    public async addEvent(stream: Stream, data: any) {\n        await this.ensureTables();\n        let result = await this.mysql.query('INSERT INTO events(streamId, aggregation, payload, sequence) ' +\n            'SELECT ?,?,?,COUNT(*) FROM events ' +\n            'WHERE streamId = ? AND aggregation = ?',\n            [stream.id, stream.aggregation, JSON.stringify(data), stream.id, stream.aggregation]);\n\n        result = await this.mysql.query('SELECT sequence, commitTimestamp FROM events WHERE id=?', [result.insertId]);\n\n        const event: Event = {\n            commitTimestamp: result.commitTimestamp,\n            payload: data,\n            sequence: result.sequence\n        };\n        return event;\n    }\n\n    public async getEvents(stream: Stream, offset = 0, limit = -1) {\n        await this.ensureTables();\n        if (limit <= 0) {\n            limit = Number.MAX_SAFE_INTEGER;\n        }\n        const result: Array<any> = await this.mysql.query('SELECT * FROM events WHERE streamId=? AND aggregation=? LIMIT ?,?',\n            [stream.id, stream.aggregation, offset, limit]);\n        return result.map(data => {\n            return {\n                commitTimestamp: data.commitTimestamp,\n                payload: JSON.parse(data.payload),\n                sequence: data.sequence\n            };\n        });\n    }\n\n    public async getAggregations(offset = 0, limit = -1): Promise<Array<string>> {\n        await this.ensureTables();\n        if (limit <= 0) {\n            limit = Number.MAX_SAFE_INTEGER;\n        }\n        return await this.mysql.query('SELECT DISTINCT aggregation FROM events LIMIT ?,?',\n            [offset, limit]);\n    }\n\n    public async getStreams(aggregation: string, offset = 0, limit = -1): Promise<Array<string>> {\n        await this.ensureTables();\n        if (limit <= 0) {\n            limit = Number.MAX_SAFE_INTEGER;\n        }\n        return await this.mysql.query('SELECT DISTINCT streamId FROM events WHERE aggregation = ? LIMIT ?,?',\n            [aggregation, offset, limit]);\n    }\n\n    private async ensureTables() {\n        if (!this.initialized) {\n            await this.createTables();\n            this.initialized = true;\n        }\n    }\n\n    private async createTables() {\n        await this.mysql.query('CREATE TABLE IF NOT EXISTS events ('\n            + 'id BIGINT NOT NULL AUTO_INCREMENT,'\n            + 'streamId VARCHAR(40) NOT NULL,'\n            + 'aggregation VARCHAR(40) NOT NULL,'\n            + 'payload TEXT,'\n            + 'sequence INT,'\n            + 'commitTimestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,'\n            + 'PRIMARY KEY (id),'\n            + 'INDEX AGGREGATION_INDEX(aggregation),'\n            + 'INDEX STREAM_ID_INDEX(streamId)'\n            + ')');\n    }\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/provider/mysql/connect.ts":{"language":"typescript","mutants":[{"id":"211","location":{"end":{"column":2,"line":9},"start":{"column":45,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"212","location":{"end":{"column":17,"line":9},"start":{"column":8,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"213","location":{"end":{"column":27,"line":9},"start":{"column":19,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"214","location":{"end":{"column":6,"line":31},"start":{"column":83,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"215","location":{"end":{"column":27,"line":18},"start":{"column":13,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"216","location":{"end":{"column":27,"line":18},"start":{"column":13,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"217","location":{"end":{"column":10,"line":25},"start":{"column":29,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"218","location":{"end":{"column":14,"line":23},"start":{"column":51,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"219","location":{"end":{"column":10,"line":28},"start":{"column":16,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"220","location":{"end":{"column":6,"line":39},"start":{"column":56,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"221","location":{"end":{"column":25,"line":35},"start":{"column":13,"line":35}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"222","location":{"end":{"column":25,"line":35},"start":{"column":13,"line":35}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"223","location":{"end":{"column":10,"line":37},"start":{"column":27,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as Joi from 'joi';\nimport * as _ from 'lodash';\nimport * as MySQL from 'mysql';\nimport { MySQLConfig } from './config';\n\nconst mySQLConfigSchema = Joi.object().keys({\n    cluster: Joi.object(),\n    config: Joi.object()\n}).xor('cluster', 'config');\n\n\nexport class MySQLFactory {\n    public static createPool(config: MySQLConfig): MySQL.PoolCluster | MySQL.Pool {\n        config = MySQLFactory.validateParams(config);\n\n        let result: MySQL.PoolCluster | MySQL.Pool;\n\n        if (config.cluster) {\n            const poolCluster = MySQL.createPoolCluster();\n            _.keys(config.cluster).forEach(key => {\n                const clusterConfig: MySQL.PoolConfig = config.cluster[key];\n                poolCluster.add(key, clusterConfig);\n            });\n            result = poolCluster;\n        } else {\n            const pool = MySQL.createPool(config.config);\n            result = pool;\n        }\n\n        return result;\n    }\n\n    private static validateParams(config: MySQLConfig) {\n        const result = Joi.validate(config, mySQLConfigSchema);\n        if (result.error) {\n            throw result.error;\n        }\n        return result.value;\n    }\n}\n\n\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/provider/mysql/mysql.ts":{"language":"typescript","mutants":[{"id":"224","location":{"end":{"column":6,"line":11},"start":{"column":38,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"225","location":{"end":{"column":6,"line":28},"start":{"column":43,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"226","location":{"end":{"column":10,"line":27},"start":{"column":54,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"228","location":{"end":{"column":24,"line":16},"start":{"column":21,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"229","location":{"end":{"column":24,"line":16},"start":{"column":21,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"230","location":{"end":{"column":18,"line":18},"start":{"column":26,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"231","location":{"end":{"column":49,"line":19},"start":{"column":39,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"232","location":{"end":{"column":49,"line":19},"start":{"column":39,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"233","location":{"end":{"column":46,"line":19},"start":{"column":44,"line":19}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"234","location":{"end":{"column":49,"line":19},"start":{"column":47,"line":19}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"227","location":{"end":{"column":14,"line":26},"start":{"column":58,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"},{"id":"236","location":{"end":{"column":26,"line":21},"start":{"column":25,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"237","location":{"end":{"column":26,"line":21},"start":{"column":25,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"238","location":{"end":{"column":22,"line":23},"start":{"column":28,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"235","location":{"end":{"column":18,"line":25},"start":{"column":64,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Timeout"}],"source":"import { Pool, PoolCluster } from 'mysql';\nimport { MySQLConfig } from './config';\nimport { MySQLFactory } from './connect';\n\n\nexport class MySQL {\n    private pool: PoolCluster | Pool;\n\n    constructor(config: MySQLConfig) {\n        this.pool = MySQLFactory.createPool(config);\n    }\n\n    public query(sql: string, args?: any) {\n        return new Promise<any>((resolve, reject) => {\n            this.pool.getConnection((err, connection) => {\n                if (err) {\n                    return reject(err);\n                }\n                connection.query(sql, args || [], (e, rows) => {\n                    connection.release();\n                    if (e) {\n                        return reject(e);\n                    }\n                    resolve(rows);\n                });\n            });\n        });\n    }\n}"},"/home/travis/build/thiagobustamante/node-eventstore/src/provider/redis.ts":{"language":"typescript","mutants":[{"id":"239","location":{"end":{"column":6,"line":16},"start":{"column":38,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"240","location":{"end":{"column":6,"line":33},"start":{"column":54,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"241","location":{"end":{"column":110,"line":19},"start":{"column":109,"line":19}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Killed"},{"id":"242","location":{"end":{"column":107,"line":19},"start":{"column":48,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"244","location":{"end":{"column":60,"line":29},"start":{"column":19,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"243","location":{"end":{"column":10,"line":26},"start":{"column":30,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"245","location":{"end":{"column":65,"line":29},"start":{"column":62,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"246","location":{"end":{"column":38,"line":30},"start":{"column":19,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"247","location":{"end":{"column":43,"line":30},"start":{"column":40,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"249","location":{"end":{"column":6,"line":38},"start":{"column":68,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"248","location":{"end":{"column":66,"line":35},"start":{"column":64,"line":35}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"250","location":{"end":{"column":52,"line":37},"start":{"column":28,"line":37}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"251","location":{"end":{"column":56,"line":40},"start":{"column":54,"line":40}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"252","location":{"end":{"column":6,"line":43},"start":{"column":82,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"253","location":{"end":{"column":88,"line":41},"start":{"column":69,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"254","location":{"end":{"column":72,"line":45},"start":{"column":70,"line":45}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Killed"},{"id":"255","location":{"end":{"column":6,"line":48},"start":{"column":98,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"257","location":{"end":{"column":6,"line":52},"start":{"column":67,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"256","location":{"end":{"column":98,"line":46},"start":{"column":64,"line":46}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"258","location":{"end":{"column":44,"line":51},"start":{"column":16,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"import { Redis } from 'ioredis';\nimport { Event } from '../model/event';\nimport { Stream } from '../model/stream';\nimport { RedisConfig } from '../redis/config';\nimport { RedisFactory } from '../redis/connect';\nimport { PersistenceProvider } from './provider';\n\n/**\n * A Persistence Provider that handle all the data in redis.\n */\nexport class RedisProvider implements PersistenceProvider {\n    private redis: Redis;\n\n    constructor(config: RedisConfig) {\n        this.redis = RedisFactory.createClient(config);\n    }\n\n    public async addEvent(stream: Stream, data: any) {\n        const sequence = await this.redis.incr(`sequences:{${this.getKey(stream.aggregation, stream.id)}}`) - 1;\n        const time = await this.redis.time();\n        const commitTimestamp = parseInt(time, 10);\n        const event: Event = {\n            commitTimestamp: commitTimestamp,\n            payload: data,\n            sequence: sequence\n        };\n        await this.redis.multi()\n            .rpush(this.getKey(stream.aggregation, stream.id), JSON.stringify(event))\n            .zadd(`meta:aggregations:${stream.aggregation}`, '1', stream.id)\n            .zadd('meta:aggregations', '1', stream.aggregation)\n            .exec();\n        return event;\n    }\n\n    public async getEvents(stream: Stream, offset = 0, limit = -1) {\n        const history: Array<string> = await this.redis.lrange(this.getKey(stream.aggregation, stream.id), offset, limit);\n        return history.map(data => JSON.parse(data));\n    }\n\n    public async getAggregations(offset = 0, limit = -1): Promise<Array<string>> {\n        const aggregations: Array<string> = await this.redis.zrange('meta:aggregations', offset, limit);\n        return aggregations;\n    }\n\n    public async getStreams(aggregation: string, offset = 0, limit = -1): Promise<Array<string>> {\n        const streams: Array<string> = await this.redis.zrange(`meta:aggregations:${aggregation}`, offset, limit);\n        return streams;\n    }\n\n    private getKey(aggregation: string, streamId: string): string {\n        return `${aggregation}:${streamId}`;\n    }\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/publisher/memory.ts":{"language":"typescript","mutants":[{"id":"259","location":{"end":{"column":6,"line":21},"start":{"column":44,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"260","location":{"end":{"column":29,"line":15},"start":{"column":24,"line":15}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"261","location":{"end":{"column":72,"line":16},"start":{"column":13,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"263","location":{"end":{"column":44,"line":16},"start":{"column":42,"line":16}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"262","location":{"end":{"column":72,"line":16},"start":{"column":13,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"264","location":{"end":{"column":36,"line":16},"start":{"column":34,"line":16}},"mutatorName":"EqualityOperator","replacement":"==","status":"Killed"},{"id":"266","location":{"end":{"column":28,"line":17},"start":{"column":24,"line":17}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"265","location":{"end":{"column":10,"line":19},"start":{"column":74,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"268","location":{"end":{"column":6,"line":36},"start":{"column":96,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"269","location":{"end":{"column":32,"line":25},"start":{"column":13,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"267","location":{"end":{"column":75,"line":18},"start":{"column":42,"line":18}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"270","location":{"end":{"column":32,"line":25},"start":{"column":13,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"271","location":{"end":{"column":32,"line":25},"start":{"column":13,"line":25}},"mutatorName":"BooleanLiteral","replacement":"aggregateListeners","status":"Killed"},{"id":"272","location":{"end":{"column":10,"line":28},"start":{"column":34,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"273","location":{"end":{"column":57,"line":26},"start":{"column":34,"line":26}},"mutatorName":"ArrayDeclaration","replacement":"new Array([])","status":"RuntimeError"},{"id":"274","location":{"end":{"column":10,"line":35},"start":{"column":16,"line":30}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"275","location":{"end":{"column":14,"line":34},"start":{"column":33,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import { Message } from '../model/message';\nimport { HasSubscribers, Publisher, Subscriber, Subscription } from './publisher';\n\n\n/**\n * A Publisher that handle all the data in memory. It is a very simple implementation that should be used\n * only for development and test purposes.\n */\nexport class InMemoryPublisher implements Publisher, HasSubscribers {\n\n    private listeners: Map<string, Array<Subscriber>> = new Map();\n\n    public async publish(message: Message) {\n        const aggregationListeners = this.listeners.get(message.stream.aggregation);\n        let notified = false;\n        if (aggregationListeners != null && aggregationListeners.length) {\n            notified = true;\n            aggregationListeners.forEach(subscriber => subscriber(message));\n        }\n        return notified;\n    }\n\n    public async subscribe(aggregation: string, subscriber: Subscriber): Promise<Subscription> {\n        let aggregateListeners = this.listeners.get(aggregation);\n        if (!aggregateListeners) {\n            aggregateListeners = new Array<Subscriber>();\n            this.listeners.set(aggregation, aggregateListeners);\n        }\n        aggregateListeners.push(subscriber);\n        return {\n            remove: async () => {\n                const index = aggregateListeners.indexOf(subscriber);\n                aggregateListeners.splice(index, 1);\n            }\n        };\n    }\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/publisher/rabbitmq.ts":{"language":"typescript","mutants":[{"id":"276","location":{"end":{"column":6,"line":15},"start":{"column":30,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"277","location":{"end":{"column":6,"line":21},"start":{"column":44,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"278","location":{"end":{"column":68,"line":20},"start":{"column":66,"line":20}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"279","location":{"end":{"column":6,"line":40},"start":{"column":96,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"280","location":{"end":{"column":47,"line":27},"start":{"column":45,"line":27}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"281","location":{"end":{"column":68,"line":27},"start":{"column":49,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"282","location":{"end":{"column":66,"line":27},"start":{"column":62,"line":27}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"283","location":{"end":{"column":51,"line":28},"start":{"column":49,"line":28}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"284","location":{"end":{"column":10,"line":31},"start":{"column":66,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"285","location":{"end":{"column":27,"line":31},"start":{"column":12,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"286","location":{"end":{"column":25,"line":31},"start":{"column":21,"line":31}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"287","location":{"end":{"column":10,"line":39},"start":{"column":16,"line":34}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"288","location":{"end":{"column":14,"line":38},"start":{"column":33,"line":35}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"289","location":{"end":{"column":6,"line":47},"start":{"column":78,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"290","location":{"end":{"column":45,"line":43},"start":{"column":13,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"291","location":{"end":{"column":45,"line":43},"start":{"column":13,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"292","location":{"end":{"column":45,"line":43},"start":{"column":13,"line":43}},"mutatorName":"BooleanLiteral","replacement":"this.exchanges.has(aggregation)","status":"Killed"},{"id":"293","location":{"end":{"column":10,"line":46},"start":{"column":47,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"294","location":{"end":{"column":63,"line":44},"start":{"column":55,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"295","location":{"end":{"column":83,"line":44},"start":{"column":65,"line":44}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"297","location":{"end":{"column":6,"line":55},"start":{"column":32,"line":49}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"296","location":{"end":{"column":81,"line":44},"start":{"column":76,"line":44}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"298","location":{"end":{"column":26,"line":50},"start":{"column":13,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"299","location":{"end":{"column":26,"line":50},"start":{"column":13,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"301","location":{"end":{"column":10,"line":53},"start":{"column":28,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"300","location":{"end":{"column":26,"line":50},"start":{"column":13,"line":50}},"mutatorName":"BooleanLiteral","replacement":"this.channel","status":"Killed"}],"source":"import * as amqp from 'amqplib';\nimport { Message } from '../model/message';\nimport { HasSubscribers, Publisher, Subscriber, Subscription } from './publisher';\n\n/**\n * A Publisher that use RabbitMQ to message communications.\n */\nexport class RabbitMQPublisher implements Publisher, HasSubscribers {\n    private channel: amqp.Channel;\n    private url: string;\n    private exchanges: Set<string> = new Set();\n\n    constructor(url: string) {\n        this.url = url;\n    }\n\n    public async publish(message: Message) {\n        const channel = await this.getChannel();\n        await this.ensureExchange(message.stream.aggregation, channel);\n        return await channel.publish(message.stream.aggregation, '', Buffer.from(JSON.stringify(message)));\n    }\n\n    public async subscribe(aggregation: string, subscriber: Subscriber): Promise<Subscription> {\n        const channel = await this.getChannel();\n        await this.ensureExchange(aggregation, channel);\n\n        const q = await channel.assertQueue('', { exclusive: true });\n        channel.bindQueue(q.queue, aggregation, '');\n        const response = await channel.consume(q.queue, (msg) => {\n            subscriber(JSON.parse(msg.content.toString()));\n        }, { noAck: true });\n        const consumerTag = response.consumerTag;\n\n        return {\n            remove: async () => {\n                await channel.cancel(consumerTag);\n                await channel.deleteQueue(q.queue);\n            }\n        };\n    }\n\n    private async ensureExchange(aggregation: string, channel: amqp.Channel) {\n        if (!this.exchanges.has(aggregation)) {\n            await channel.assertExchange(aggregation, 'fanout', { durable: false });\n            this.exchanges.add(aggregation);\n        }\n    }\n\n    private async getChannel() {\n        if (!this.channel) {\n            const conn = await amqp.connect(this.url);\n            this.channel = await conn.createChannel();\n        }\n        return this.channel;\n    }\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/publisher/redis.ts":{"language":"typescript","mutants":[{"id":"303","location":{"end":{"column":6,"line":19},"start":{"column":38,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"302","location":{"end":{"column":36,"line":14},"start":{"column":31,"line":14}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"305","location":{"end":{"column":29,"line":23},"start":{"column":16,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"304","location":{"end":{"column":6,"line":24},"start":{"column":44,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"306","location":{"end":{"column":29,"line":23},"start":{"column":16,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"307","location":{"end":{"column":27,"line":23},"start":{"column":26,"line":23}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"308","location":{"end":{"column":27,"line":23},"start":{"column":26,"line":23}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"309","location":{"end":{"column":6,"line":45},"start":{"column":96,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"310","location":{"end":{"column":25,"line":28},"start":{"column":13,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"311","location":{"end":{"column":25,"line":28},"start":{"column":13,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"312","location":{"end":{"column":25,"line":28},"start":{"column":13,"line":28}},"mutatorName":"BooleanLiteral","replacement":"subscribers","status":"Killed"},{"id":"313","location":{"end":{"column":10,"line":31},"start":{"column":27,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"314","location":{"end":{"column":50,"line":29},"start":{"column":27,"line":29}},"mutatorName":"ArrayDeclaration","replacement":"new Array([])","status":"RuntimeError"},{"id":"315","location":{"end":{"column":10,"line":44},"start":{"column":16,"line":36}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"316","location":{"end":{"column":14,"line":43},"start":{"column":48,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"317","location":{"end":{"column":45,"line":40},"start":{"column":21,"line":40}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"318","location":{"end":{"column":45,"line":40},"start":{"column":21,"line":40}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"319","location":{"end":{"column":43,"line":40},"start":{"column":40,"line":40}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"320","location":{"end":{"column":18,"line":42},"start":{"column":47,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"321","location":{"end":{"column":6,"line":56},"start":{"column":43,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"322","location":{"end":{"column":34,"line":48},"start":{"column":13,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"RuntimeError"},{"id":"323","location":{"end":{"column":34,"line":48},"start":{"column":13,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"RuntimeError"},{"id":"324","location":{"end":{"column":34,"line":48},"start":{"column":13,"line":48}},"mutatorName":"BooleanLiteral","replacement":"this.listenningRedis","status":"Killed"},{"id":"325","location":{"end":{"column":10,"line":55},"start":{"column":36,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"326","location":{"end":{"column":40,"line":49},"start":{"column":36,"line":49}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"327","location":{"end":{"column":52,"line":50},"start":{"column":43,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"328","location":{"end":{"column":14,"line":54},"start":{"column":81,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"329","location":{"end":{"column":70,"line":53},"start":{"column":37,"line":53}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"RuntimeError"}],"source":"import { Redis } from 'ioredis';\nimport { Message } from '../model/message';\nimport { RedisConfig } from '../redis/config';\nimport { RedisFactory } from '../redis/connect';\nimport { HasSubscribers, Publisher, Subscriber, Subscription } from './publisher';\n\n/**\n * A Publisher that use Redis pub / sub feature to message communications.\n */\nexport class RedisPublisher implements Publisher, HasSubscribers {\n    private redisSubscriber: Redis;\n    private redisPublisher: Redis;\n    private listeners: Map<string, Array<Subscriber>> = new Map();\n    private listenningRedis = false;\n\n    constructor(config: RedisConfig) {\n        this.redisSubscriber = RedisFactory.createClient(config);\n        this.redisPublisher = RedisFactory.createClient(config);\n    }\n\n    public async publish(message: Message) {\n        const listeners = await this.redisPublisher.publish(message.stream.aggregation, JSON.stringify(message));\n        return listeners > 0;\n    }\n\n    public async subscribe(aggregation: string, subscriber: Subscriber): Promise<Subscription> {\n        let subscribers = this.listeners.get(aggregation);\n        if (!subscribers) {\n            subscribers = new Array<Subscriber>();\n            this.listeners.set(aggregation, subscribers);\n        }\n        subscribers.push(subscriber);\n        await this.redisSubscriber.subscribe(aggregation);\n        await this.registerRedisListener();\n\n        return {\n            remove: async (): Promise<void> => {\n                const index = subscribers.indexOf(subscriber);\n                subscribers.splice(index, 1);\n                if (subscribers.length === 0) {\n                    this.redisSubscriber.unsubscribe(aggregation);\n                }\n            }\n        };\n    }\n\n    private async registerRedisListener() {\n        if (!this.listenningRedis) {\n            this.listenningRedis = true;\n            await this.redisSubscriber.on('message', (aggregation, received) => {\n                const message: Message = JSON.parse(received);\n                const subscribers = this.listeners.get(aggregation);\n                subscribers.forEach(subscriber => subscriber(message));\n            });\n        }\n    }\n}\n"},"/home/travis/build/thiagobustamante/node-eventstore/src/redis/connect.ts":{"language":"typescript","mutants":[{"id":"331","location":{"end":{"column":67,"line":9},"start":{"column":28,"line":9}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"330","location":{"end":{"column":2,"line":10},"start":{"column":43,"line":6}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"332","location":{"end":{"column":2,"line":25},"start":{"column":45,"line":12}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"RuntimeError"},{"id":"333","location":{"end":{"column":84,"line":13},"start":{"column":31,"line":13}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"334","location":{"end":{"column":6,"line":19},"start":{"column":32,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"335","location":{"end":{"column":6,"line":23},"start":{"column":33,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"336","location":{"end":{"column":86,"line":22},"start":{"column":33,"line":22}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"RuntimeError"},{"id":"337","location":{"end":{"column":20,"line":25},"start":{"column":8,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"338","location":{"end":{"column":32,"line":25},"start":{"column":22,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"339","location":{"end":{"column":43,"line":25},"start":{"column":34,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"340","location":{"end":{"column":6,"line":66},"start":{"column":66,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"342","location":{"end":{"column":27,"line":37},"start":{"column":13,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"341","location":{"end":{"column":10,"line":35},"start":{"column":37,"line":33}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"343","location":{"end":{"column":27,"line":37},"start":{"column":13,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"344","location":{"end":{"column":10,"line":45},"start":{"column":29,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"345","location":{"end":{"column":14,"line":40},"start":{"column":44,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"346","location":{"end":{"column":14,"line":44},"start":{"column":63,"line":41}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"347","location":{"end":{"column":34,"line":43},"start":{"column":29,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"348","location":{"end":{"column":35,"line":45},"start":{"column":20,"line":45}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"349","location":{"end":{"column":35,"line":45},"start":{"column":20,"line":45}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"350","location":{"end":{"column":10,"line":54},"start":{"column":37,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"351","location":{"end":{"column":14,"line":49},"start":{"column":55,"line":46}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"352","location":{"end":{"column":14,"line":52},"start":{"column":51,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"353","location":{"end":{"column":10,"line":63},"start":{"column":16,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"354","location":{"end":{"column":14,"line":57},"start":{"column":63,"line":55}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"355","location":{"end":{"column":6,"line":74},"start":{"column":56,"line":68}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"356","location":{"end":{"column":25,"line":70},"start":{"column":13,"line":70}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"357","location":{"end":{"column":25,"line":70},"start":{"column":13,"line":70}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"358","location":{"end":{"column":10,"line":72},"start":{"column":27,"line":70}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"}],"source":"import * as Redis from 'ioredis';\nimport * as Joi from 'joi';\nimport * as _ from 'lodash';\nimport { RedisConfig } from './config';\n\nconst redisNodeSchema = Joi.object().keys({\n    host: Joi.string().required(),\n    password: Joi.string(),\n    port: Joi.alternatives([Joi.string(), Joi.number().positive()])\n});\n\nconst redisConfigSchema = Joi.object().keys({\n    cluster: Joi.alternatives([Joi.array().items(redisNodeSchema), redisNodeSchema]),\n    options: Joi.object().keys({\n        connectionName: Joi.string(),\n        db: Joi.number().positive(),\n        keyPrefix: Joi.string(),\n        password: Joi.string()\n    }),\n    sentinel: Joi.object().keys({\n        name: Joi.string().required(),\n        nodes: Joi.alternatives([Joi.array().items(redisNodeSchema), redisNodeSchema]).required()\n    }),\n    standalone: redisNodeSchema\n}).xor('standalone', 'sentinel', 'cluster');\n\n\nexport class RedisFactory {\n    public static createClient(config: RedisConfig): Redis.Redis {\n        config = RedisFactory.validateParams(config);\n        let client;\n\n        config = _.defaults(config, {\n            options: {}\n        });\n\n        if (config.cluster) {\n            config.cluster.forEach(node => {\n                node.port = _.toSafeInteger(node.port);\n            });\n            client = new Redis.Cluster(config.cluster as any, {\n                redisOptions: config.options,\n                scaleReads: 'all'\n            });\n        } else if (config.sentinel) {\n            const params = _.defaults(config.options, {\n                name: config.sentinel.name,\n                sentinels: config.sentinel.nodes\n            });\n            config.sentinel.nodes.forEach(node => {\n                node.port = _.toSafeInteger(node.port);\n            });\n            client = new Redis(params);\n        } else {\n            config.standalone = _.defaults(config.standalone, {\n                port: 6379\n            });\n\n            config.options.password = config.standalone.password;\n\n            client = new Redis(_.toSafeInteger(config.standalone.port),\n                config.standalone.host, config.options);\n        }\n\n        return client;\n    }\n\n    private static validateParams(config: RedisConfig) {\n        const result = Joi.validate(config, redisConfigSchema);\n        if (result.error) {\n            throw result.error;\n        }\n        return result.value;\n    }\n\n}\n"}},"schemaVersion":"1.0","thresholds":{"break":99}};